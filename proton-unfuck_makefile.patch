diff --git a/build/makefile_base.mak b/build/makefile_base.mak
index d9b6b80..cf09300 100644
--- a/build/makefile_base.mak
+++ b/build/makefile_base.mak
@@ -89,8 +89,8 @@ SELECT_DOCKER_IMAGE :=
 # controllable by SUBMAKE_JOBS.  Not ideal.
 ifneq ($(CONTAINER_SHELL32)$(CONTAINER_SHELL64),)
 	SUBMAKE_JOBS ?= 36
-	MAKE := make -j$(SUBMAKE_JOBS)
 endif
+MAKE := make -j$(SUBMAKE_JOBS)
 
 # Use default shell if no STEAMRT_ variables setup a container to invoke.  Commands will just run natively.
 ifndef CONTAINER_SHELL64
@@ -152,7 +152,8 @@ else
     MESON_STRIP_ARG := --strip
 endif
 
-OPTIMIZE_FLAGS := -O2 -march=nocona $(call cc-option,$(CC),-mtune=core-avx2,) -mfpmath=sse
+CFLAGS ?= -O2 -march=nocona $(call cc-option,$(CC),-mtune=core-avx2,)
+OPTIMIZE_FLAGS := $(CFLAGS) -mfpmath=sse
 SANITY_FLAGS   := -fwrapv -fno-strict-aliasing
 COMMON_FLAGS   := $(OPTIMIZE_FLAGS) $(SANITY_FLAGS)
 
@@ -227,6 +228,16 @@ GST_LIBAV_OBJ64 := ./obj-gst-libav64
 FAUDIO := $(SRCDIR)/FAudio
 FAUDIO_OBJ32 := ./obj-faudio32
 FAUDIO_OBJ64 := ./obj-faudio64
+FAUDIO_DEPS32 :=
+FAUDIO_DEPS64 :=
+ifneq ($(STEAMRT_PATH),) # Don't build cmake in native mode
+	FAUDIO_DEPS32 += cmake32
+	FAUDIO_DEPS64 += cmake64
+endif # STEAMRT_PATH
+ifeq ($(WITH_FFMPEG),1)
+	FAUDIO_DEPS32 += ffmpeg32
+	FAUDIO_DEPS64 += ffmpeg64
+endif # WITH_FFMPEG
 
 LSTEAMCLIENT := $(SRCDIR)/lsteamclient
 LSTEAMCLIENT32 := ./syn-lsteamclient32/lsteamclient
@@ -243,6 +254,16 @@ WINE_DST32 := ./dist-wine32
 WINE_OBJ32 := ./obj-wine32
 WINE_OBJ64 := ./obj-wine64
 WINEMAKER := $(abspath $(WINE)/tools/winemaker/winemaker)
+WINE_DEPS32 := faudio32
+WINE_DEPS64 := faudio64
+ifneq ($(STEAMRT_PATH),) # Don't build bison in native mode
+	WINE_DEPS32 += bison32
+	WINE_DEPS64 += bison64
+endif # STEAMRT_PATH
+ifneq ($(SYSTEM_GSTREAMER), 1) # Use system gstreamer
+	WINE_DEPS32 += gst_base32
+	WINE_DEPS64 += gst_base64
+endif # SYSTEM_GSTREAMER
 
 # Wine outputs that need to exist for other steps (dist)
 WINE_OUT_BIN := $(DST_DIR)/bin/wine64
@@ -250,9 +271,11 @@ WINE_OUT_SERVER := $(DST_DIR)/bin/wineserver
 WINE_OUT := $(WINE_OUT_BIN) $(WINE_OUT_SERVER)
 # Tool-only build outputs needed for other projects
 WINEGCC32 := $(TOOLS_DIR32)/bin/winegcc
+WINEGXX32 := $(TOOLS_DIR32)/bin/wineg++
 WINEBUILD32 := $(TOOLS_DIR32)/bin/winebuild
 WINE_BUILDTOOLS32 := $(WINEGCC32) $(WINEBUILD32)
 WINEGCC64 := $(TOOLS_DIR64)/bin/winegcc
+WINEGXX64 := $(TOOLS_DIR64)/bin/wineg++
 WINEBUILD64 := $(TOOLS_DIR64)/bin/winebuild
 WINE_BUILDTOOLS64 := $(WINEGCC64) $(WINEBUILD64)
 
@@ -260,6 +283,12 @@ WINEWIDL_OBJ32 := ./obj-widl32
 WINEWIDL_OBJ64 := ./obj-widl64
 WINEWIDL32 := $(WINEWIDL_OBJ32)/tools/widl/widl
 WINEWIDL64 := $(WINEWIDL_OBJ64)/tools/widl/widl
+WINEWIDL_DEPS32 :=
+WINEWIDL_DEPS64 :=
+ifneq ($(STEAMRT_PATH),) # Don't build bison in native mode
+	WINEWIDL_DEPS32 += bison32
+	WINEWIDL_DEPS64 += bison64
+endif # STEAMRT_PATH
 
 VRCLIENT := $(SRCDIR)/vrclient_x64
 VRCLIENT32 := ./syn-vrclient32
@@ -274,11 +303,15 @@ VKD3D := $(SRCDIR)/vkd3d-proton
 VKD3D_OBJ32 := ./obj-vkd3d32
 VKD3D_OBJ64 := ./obj-vkd3d64
 
+CMAKE_BIN32 := cmake
+CMAKE_BIN64 := cmake
+ifneq ($(STEAMRT_PATH),) # Don't build cmake in native mode
 CMAKE := $(SRCDIR)/cmake
-CMAKE_OBJ32 := ./obj-cmake32
-CMAKE_OBJ64 := ./obj-cmake64
+CMAKE_OBJ32 := ../obj-cmake32
+CMAKE_OBJ64 := ../obj-cmake64
 CMAKE_BIN32 := $(CMAKE_OBJ32)/built/bin/cmake
 CMAKE_BIN64 := $(CMAKE_OBJ64)/built/bin/cmake
+endif # STEAMRT_PATH
 
 BISON_VER = 3.3.2
 BISON_TARBALL := bison-$(BISON_VER).tar.xz
@@ -287,13 +320,10 @@ BISON_OBJ32 := ./obj-bison32
 BISON_OBJ64 := ./obj-bison64
 BISON_BIN32 := $(BISON_OBJ32)/built/bin/bison
 BISON_BIN64 := $(BISON_OBJ64)/built/bin/bison
-
-LIBFFI_VER = 3.3
-LIBFFI_TARBALL := libffi-$(LIBFFI_VER).tar.gz
-LIBFFI := $(SRCDIR)/contrib/libffi-$(LIBFFI_VER)
-LIBFFI_OBJ32 := ./obj-libffi32
-LIBFFI_OBJ64 := ./obj-libffi64
-
+ifneq ($(STEAMRT_PATH),) # Don't build bison in native mode
+	WINE_BISON32 = BISON=$(abspath $(BISON_BIN32))
+	WINE_BISON64 = BISON=$(abspath $(BISON_BIN64))
+endif # STEAMRT_PATH
 
 
 FONTS := $(SRCDIR)/fonts
@@ -303,7 +333,6 @@ FONTS_OBJ := ./obj-fonts
 OBJ_DIRS := $(TOOLS_DIR32)        $(TOOLS_DIR64)        \
             $(FFMPEG_OBJ32)       $(FFMPEG_OBJ64)       \
             $(GLIB_OBJ32)         $(GLIB_OBJ64)         \
-            $(LIBFFI_OBJ32)       $(LIBFFI_OBJ64)       \
             $(GST_ORC_OBJ32)      $(GST_ORC_OBJ64)      \
             $(GSTREAMER_OBJ32)    $(GSTREAMER_OBJ64)    \
             $(GST_BASE_OBJ32)     $(GST_BASE_OBJ64)     \
@@ -333,13 +362,11 @@ $(OBJ_DIRS):
 .PHONY: downloads
 
 BISON_TARBALL_URL := https://ftpmirror.gnu.org/bison/$(BISON_TARBALL)
-LIBFFI_TARBALL_URL := https://sourceware.org/pub/libffi/$(LIBFFI_TARBALL)
 GECKO64_TARBALL_URL := https://dl.winehq.org/wine/wine-gecko/$(GECKO_VER)/$(GECKO64_TARBALL)
 GECKO32_TARBALL_URL := https://dl.winehq.org/wine/wine-gecko/$(GECKO_VER)/$(GECKO32_TARBALL)
 MONO_TARBALL_URL := https://github.com/madewokherd/wine-mono/releases/download/wine-mono-$(WINEMONO_VER)/$(WINEMONO_TARBALL)
 
 SHARED_BISON_TARBALL := $(SRCDIR)/../bison/$(BISON_TARBALL)
-SHARED_LIBFFI_TARBALL := $(SRCDIR)/../libffi/$(LIBFFI_TARBALL)
 SHARED_GECKO64_TARBALL := $(SRCDIR)/../gecko/$(GECKO64_TARBALL)
 SHARED_GECKO32_TARBALL := $(SRCDIR)/../gecko/$(GECKO32_TARBALL)
 SHARED_MONO_TARBALL := $(SRCDIR)/../mono/$(WINEMONO_TARBALL)
@@ -347,10 +374,6 @@ SHARED_MONO_TARBALL := $(SRCDIR)/../mono/$(WINEMONO_TARBALL)
 $(SHARED_BISON_TARBALL):
 	mkdir -p $(dir $@)
 	wget -O "$@" "$(BISON_TARBALL_URL)"
-	
-$(SHARED_LIBFFI_TARBALL):
-	mkdir -p $(dir $@)
-	wget -O "$@" "$(LIBFFI_TARBALL_URL)"
 
 $(SHARED_GECKO64_TARBALL):
 	mkdir -p $(dir $@)
@@ -364,7 +387,7 @@ $(SHARED_MONO_TARBALL):
 	mkdir -p $(dir $@)
 	wget -O "$@" "$(MONO_TARBALL_URL)"
 
-downloads: $(SHARED_BISON_TARBALL) $(SHARED_LIBFFI_TARBALL) $(SHARED_GECKO64_TARBALL) $(SHARED_GECKO32_TARBALL) $(SHARED_MONO_TARBALL)
+downloads: $(SHARED_BISON_TARBALL) $(SHARED_GECKO64_TARBALL) $(SHARED_GECKO32_TARBALL) $(SHARED_MONO_TARBALL)
 
 ##
 ## dist/install -- steps to finalize the install
@@ -410,11 +433,26 @@ DIST_GECKO64 := $(DIST_GECKO_DIR)/wine-gecko-$(GECKO_VER)-x86_64
 DIST_WINEMONO_DIR := $(DST_DIR)/share/wine/mono
 DIST_WINEMONO := $(DIST_WINEMONO_DIR)/wine-mono-$(WINEMONO_VER)
 DIST_FONTS := $(DST_DIR)/share/fonts
+DIST_DEPS := wine vrclient lsteamclient steam vkd3d-proton
+ifneq ($(SYSTEM_GSTREAMER),1) # Use system gstreamer
+	DIST_DEPS += gst_good gst_bad gst_ugly gst_libav
+endif # SYSTEM_GSTREAMER
+ifneq ($(NO_DXVK),1) # May be disabled by configure
+	DIST_DEPS += dxvk
+endif # NO_DXVK
 
 DIST_TARGETS := $(DIST_COPY_TARGETS) $(DIST_OVR32) $(DIST_OVR64) \
-                $(DIST_GECKO32) $(DIST_GECKO64) $(DIST_WINEMONO) \
                 $(DIST_COMPAT_MANIFEST) $(DIST_LICENSE) $(DIST_OFL_LICENSE) $(DIST_FONTS)
 
+ifneq ($(SYSTEM_GECKO),1) # May be disabled by configure
+	DIST_TARGETS += $(DIST_GECKO32)
+	DIST_TARGETS += $(DIST_GECKO64)
+endif # SYSTEM_GECKO
+
+ifneq ($(SYSTEM_MONO),1) # May be disabled by configure
+	DIST_TARGETS += $(DIST_WINEMONO)
+endif # SYSTEM_MONO
+
 DEPLOY_COPY_TARGETS := $(DIST_COPY_TARGETS) $(DIST_VERSION) $(DIST_LICENSE) $(DIST_OFL_LICENSE)
 REDIST_COPY_TARGETS := $(DEPLOY_COPY_TARGETS) $(DIST_COMPAT_MANIFEST)
 
@@ -490,7 +528,7 @@ $(DIST_FONTS): fonts
 ALL_TARGETS += dist
 GOAL_TARGETS += dist
 
-dist: $(DIST_TARGETS) wine gst_good gst_bad gst_ugly gst_libav vrclient lsteamclient steam dxvk vkd3d-proton | $(DST_DIR)
+dist: $(DIST_TARGETS) $(DIST_DEPS) | $(DST_DIR)
 	echo `date '+%s'` `GIT_DIR=$(abspath $(SRCDIR)/.git) git describe --tags` > $(DIST_VERSION)
 	cp $(DIST_VERSION) $(DST_BASE)/
 	rm -rf $(abspath $(DIST_PREFIX)) && \
@@ -537,6 +575,8 @@ module64:
 
 module: module32 module64
 
+ifneq ($(SYSTEM_GSTREAMER),1) # Use system gstreamer
+
 ##
 ## glib
 ##
@@ -545,27 +585,36 @@ GLIB_CONFIGURE_FILES32 := $(GLIB_OBJ32)/build.ninja
 GLIB_CONFIGURE_FILES64 := $(GLIB_OBJ64)/build.ninja
 
 GLIB_MESON_ARGS := -Dlibmount=false
+GLIB_MESON_ARGS += \
+	-Dselinux=false \
+	-Db_lto=true \
+	-Db_pie=true
 
 # 64-bit configure.  Remove coredata file if already configured (due to e.g. makefile changing)
 $(GLIB_CONFIGURE_FILES64): SHELL = $(CONTAINER_SHELL64)
-$(GLIB_CONFIGURE_FILES64): $(MAKEFILE_DEP) | libffi64 $(GLIB_OBJ64)
+$(GLIB_CONFIGURE_FILES64): $(MAKEFILE_DEP) | $(GLIB_OBJ64)
 	if [ -e "$(abspath $(GLIB_OBJ64))"/build.ninja ]; then \
 		rm -f "$(abspath $(GLIB_OBJ64))"/meson-private/coredata.dat; \
 	fi
 	cd "$(abspath $(GLIB))" && \
 	PATH="$(abspath $(TOOLS_DIR64))/bin:$(PATH)" \
 		PKG_CONFIG_PATH=$(abspath $(TOOLS_DIR64))/lib/pkgconfig \
+		CFLAGS+=" -DG_DISABLE_CAST_CHECKS" \
 		meson --prefix="$(abspath $(TOOLS_DIR64))" --libdir="lib" $(GLIB_MESON_ARGS) $(MESON_STRIP_ARG) --buildtype=release "$(abspath $(GLIB_OBJ64))"
 
 # 32-bit configure.  Remove coredata file if already configured (due to e.g. makefile changing)
 $(GLIB_CONFIGURE_FILES32): SHELL = $(CONTAINER_SHELL32)
-$(GLIB_CONFIGURE_FILES32): $(MAKEFILE_DEP) | libffi32 $(GLIB_OBJ32)
+$(GLIB_CONFIGURE_FILES32): $(MAKEFILE_DEP) | $(GLIB_OBJ32)
 	if [ -e "$(abspath $(GLIB_OBJ32))"/build.ninja ]; then \
 		rm -f "$(abspath $(GLIB_OBJ32))"/meson-private/coredata.dat; \
 	fi
 	cd "$(abspath $(GLIB))" && \
 	PATH="$(abspath $(TOOLS_DIR32))/bin:$(PATH)" \
 		PKG_CONFIG_PATH=$(abspath $(TOOLS_DIR32))/lib/pkgconfig \
+		CFLAGS="-m32 -mstackrealign $(COMMON_FLAGS)" \
+		CXXFLAGS="-m32 -mstackrealign $(COMMON_FLAGS)" \
+		PKG_CONFIG="i686-pc-linux-gnu-pkg-config" \
+		CFLAGS+=" -DG_DISABLE_CAST_CHECKS" \
 		meson --prefix="$(abspath $(TOOLS_DIR32))" --libdir="lib" $(GLIB_MESON_ARGS) $(MESON_STRIP_ARG) --buildtype=release "$(abspath $(GLIB_OBJ32))"
 
 ## glib goals
@@ -606,6 +655,8 @@ glib32: $(GLIB_CONFIGURE_FILES32)
 
 
 GST_COMMON_MESON_ARGS := \
+	-Db_lto=true \
+	-Db_pie=true \
 	-Dexamples=disabled \
 	-Dtests=disabled \
 	-Dgtk_doc=disabled \
@@ -647,6 +698,9 @@ $(GST_ORC_CONFIGURE_FILES32): $(MAKEFILE_DEP) glib32 | $(GST_ORC_OBJ32)
 	fi
 	cd "$(abspath $(GST_ORC))" && \
 	PATH="$(abspath $(TOOLS_DIR32))/bin:$(PATH)" \
+		CFLAGS="-m32 $(COMMON_FLAGS)" \
+		CXXFLAGS="-m32 $(COMMON_FLAGS)" \
+		PKG_CONFIG="i686-pc-linux-gnu-pkg-config" \
 		PKG_CONFIG_PATH=$(abspath $(TOOLS_DIR32))/lib/pkgconfig \
 		meson --prefix="$(abspath $(TOOLS_DIR32))" --libdir="lib" $(GST_ORC_MESON_ARGS) $(MESON_STRIP_ARG) "$(abspath $(GST_ORC_OBJ32))"
 
@@ -688,6 +742,10 @@ GSTREAMER_MESON_ARGS := \
 	-Dgst_parse=false \
 	-Dbenchmarks=disabled \
 	-Dtools=disabled \
+	-Dbash-completion=disabled \
+	-Dptp-helper-permissions=capabilities \
+	-Ddbghelp=disabled \
+	-Dpackage-name="GStreamer (Proton)" \
 	$(GST_COMMON_MESON_ARGS)
 
 GSTREAMER_CONFIGURE_FILES32 := $(GSTREAMER_OBJ32)/build.ninja
@@ -712,6 +770,9 @@ $(GSTREAMER_CONFIGURE_FILES32): $(MAKEFILE_DEP) gst_orc32 | $(GSTREAMER_OBJ32)
 	fi
 	cd "$(abspath $(GSTREAMER))" && \
 	PATH="$(abspath $(TOOLS_DIR32))/bin:$(PATH)" \
+		CFLAGS="-m32 $(COMMON_FLAGS)" \
+		CXXFLAGS="-m32 $(COMMON_FLAGS)" \
+		PKG_CONFIG="i686-pc-linux-gnu-pkg-config" \
 		PKG_CONFIG_PATH=$(abspath $(TOOLS_DIR32))/lib/pkgconfig \
 		meson --prefix="$(abspath $(TOOLS_DIR32))" --libdir="lib" $(GSTREAMER_MESON_ARGS) $(MESON_STRIP_ARG) --buildtype=release "$(abspath $(GSTREAMER_OBJ32))"
 
@@ -776,6 +837,7 @@ GST_BASE_MESON_ARGS := \
 	-Dx11=disabled \
 	-Dxshm=disabled \
 	-Dxvideo=disabled \
+	-Dpackage-name="GStreamer Base Plugins (Proton)" \
 	$(GST_COMMON_MESON_ARGS)
 
 GST_BASE_CONFIGURE_FILES32 := $(GST_BASE_OBJ32)/build.ninja
@@ -800,6 +862,9 @@ $(GST_BASE_CONFIGURE_FILES32): $(MAKEFILE_DEP) gstreamer32 | $(GST_BASE_OBJ32)
 	fi
 	cd "$(abspath $(GST_BASE))" && \
 	PATH="$(abspath $(TOOLS_DIR32))/bin:$(PATH)" \
+		CFLAGS="-m32 $(COMMON_FLAGS)" \
+		CXXFLAGS="-m32 $(COMMON_FLAGS)" \
+		PKG_CONFIG="i686-pc-linux-gnu-pkg-config" \
 		PKG_CONFIG_PATH=$(abspath $(TOOLS_DIR32))/lib/pkgconfig \
 		meson --prefix="$(abspath $(TOOLS_DIR32))" --libdir="lib" $(GST_BASE_MESON_ARGS) $(MESON_STRIP_ARG) --buildtype=release "$(abspath $(GST_BASE_OBJ32))"
 
@@ -888,6 +953,7 @@ GST_GOOD_MESON_ARGS := \
 	-Dwavenc=disabled \
 	-Dximagesrc=disabled \
 	-Dy4m=disabled \
+	-Dpackage-name="GStreamer Good Plugins (Proton)" \
 	$(GST_COMMON_MESON_ARGS)
 
 GST_GOOD_CONFIGURE_FILES32 := $(GST_GOOD_OBJ32)/build.ninja
@@ -912,6 +978,9 @@ $(GST_GOOD_CONFIGURE_FILES32): $(MAKEFILE_DEP) gst_base32 | $(GST_GOOD_OBJ32)
 	fi
 	cd "$(abspath $(GST_GOOD))" && \
 	PATH="$(abspath $(TOOLS_DIR32))/bin:$(PATH)" \
+		CFLAGS="-m32 $(COMMON_FLAGS)" \
+		CXXFLAGS="-m32 $(COMMON_FLAGS)" \
+		PKG_CONFIG="i686-pc-linux-gnu-pkg-config" \
 		PKG_CONFIG_PATH=$(abspath $(TOOLS_DIR32))/lib/pkgconfig \
 		meson --prefix="$(abspath $(TOOLS_DIR32))" --libdir="lib" $(GST_GOOD_MESON_ARGS) $(MESON_STRIP_ARG) --buildtype=release "$(abspath $(GST_GOOD_OBJ32))"
 
@@ -971,6 +1040,9 @@ GST_BAD_MESON_ARGS := \
 	-Dopencv=disabled \
 	-Dvoamrwbenc=disabled \
 	-Dx265=disabled \
+	-Daom=disabled \
+	-Dlv2=disabled \
+	-Dpackage-name="GStreamer Bad Plugins (Proton)" \
 	$(GST_COMMON_MESON_ARGS)
 
 GST_BAD_CONFIGURE_FILES32 := $(GST_BAD_OBJ32)/build.ninja
@@ -995,6 +1067,9 @@ $(GST_BAD_CONFIGURE_FILES32): $(MAKEFILE_DEP) gst_base32 | $(GST_BAD_OBJ32)
 	fi
 	cd "$(abspath $(GST_BAD))" && \
 	PATH="$(abspath $(TOOLS_DIR32))/bin:$(PATH)" \
+		CFLAGS="-m32 $(COMMON_FLAGS)" \
+		CXXFLAGS="-m32 $(COMMON_FLAGS)" \
+		PKG_CONFIG="i686-pc-linux-gnu-pkg-config" \
 		PKG_CONFIG_PATH=$(abspath $(TOOLS_DIR32))/lib/pkgconfig \
 		meson --prefix="$(abspath $(TOOLS_DIR32))" --libdir="lib" $(GST_BAD_MESON_ARGS) $(MESON_STRIP_ARG) --buildtype=release "$(abspath $(GST_BAD_OBJ32))"
 
@@ -1040,6 +1115,7 @@ GST_UGLY_MESON_ARGS := \
         -Dglib-checks='disabled' \
         -Dglib-checks='disabled' \
         -Ddoc='disabled' \
+        -Dpackage-name="GStreamer Ugly Plugins (Proton)" \
 	$(GST_COMMON_MESON_ARGS)
 
 GST_UGLY_CONFIGURE_FILES32 := $(GST_UGLY_OBJ32)/build.ninja
@@ -1064,6 +1140,9 @@ $(GST_UGLY_CONFIGURE_FILES32): $(MAKEFILE_DEP) gst_base32 | $(GST_UGLY_OBJ32)
 	fi
 	cd "$(abspath $(GST_UGLY))" && \
 	PATH="$(abspath $(TOOLS_DIR32))/bin:$(PATH)" \
+		CFLAGS="-m32 $(COMMON_FLAGS)" \
+		CXXFLAGS="-m32 $(COMMON_FLAGS)" \
+		PKG_CONFIG="i686-pc-linux-gnu-pkg-config" \
 		PKG_CONFIG_PATH=$(abspath $(TOOLS_DIR32))/lib/pkgconfig \
 		meson --prefix="$(abspath $(TOOLS_DIR32))" --libdir="lib" $(GST_UGLY_MESON_ARGS) $(MESON_STRIP_ARG) --buildtype=release "$(abspath $(GST_UGLY_OBJ32))"
 
@@ -1105,6 +1184,7 @@ gst_ugly32: $(GST_UGLY_CONFIGURE_FILES32)
 
 GST_LIBAV_MESON_ARGS := \
         -Ddoc=disabled \
+        -Dpackage-name="GStreamer FFmpeg Plugin (Proton)" \
 	$(GST_COMMON_MESON_ARGS)
 
 GST_LIBAV_CONFIGURE_FILES32 := $(GST_LIBAV_OBJ32)/build.ninja
@@ -1129,6 +1209,9 @@ $(GST_LIBAV_CONFIGURE_FILES32): $(MAKEFILE_DEP) gst_base32 | ffmpeg32 $(GST_LIBA
 	fi
 	cd "$(abspath $(GST_LIBAV))" && \
 	PATH="$(abspath $(TOOLS_DIR32))/bin:$(PATH)" \
+		CFLAGS="-m32 $(COMMON_FLAGS)" \
+		CXXFLAGS="-m32 $(COMMON_FLAGS)" \
+		PKG_CONFIG="i686-pc-linux-gnu-pkg-config" \
 		PKG_CONFIG_PATH=$(abspath $(TOOLS_DIR32))/lib/pkgconfig \
 		meson --prefix="$(abspath $(TOOLS_DIR32))" --libdir="lib" $(GST_LIBAV_MESON_ARGS) $(MESON_STRIP_ARG) --buildtype=release "$(abspath $(GST_LIBAV_OBJ32))"
 
@@ -1164,11 +1247,14 @@ gst_libav32: $(GST_LIBAV_CONFIGURE_FILES32)
 	cp -a $(TOOLS_DIR32)/lib/libgst* $(DST_DIR)/lib/ && \
 	cp -a $(TOOLS_DIR32)/lib/gstreamer-1.0 $(DST_DIR)/lib/
 
+endif # ifneq ($(SYSTEM_GSTREAMER),)
 
 ##
 ## ffmpeg
 ##
 
+ifeq ($(WITH_FFMPEG),1)
+
 FFMPEG_CONFIGURE_FILES32 := $(FFMPEG_OBJ32)/Makefile
 FFMPEG_CONFIGURE_FILES64 := $(FFMPEG_OBJ64)/Makefile
 
@@ -1179,6 +1265,8 @@ $(FFMPEG_CONFIGURE_FILES64): $(FFMPEG)/configure $(MAKEFILE_DEP) | $(FFMPEG_OBJ6
 		$(abspath $(FFMPEG))/configure \
 			--cc=$(CC_QUOTED) --cxx=$(CXX_QUOTED) \
 			--prefix=$(abspath $(TOOLS_DIR64)) \
+			--extra-cflags="$(COMMON_FLAGS)" \
+			--extra-ldflags="$(LDFLAGS)" \
 			--disable-static \
 			--enable-shared \
 			--disable-programs \
@@ -1225,10 +1313,12 @@ $(FFMPEG_CONFIGURE_FILES64): $(FFMPEG)/configure $(MAKEFILE_DEP) | $(FFMPEG_OBJ6
 $(FFMPEG_CONFIGURE_FILES32): SHELL = $(CONTAINER_SHELL32)
 $(FFMPEG_CONFIGURE_FILES32): $(FFMPEG)/configure $(MAKEFILE_DEP) | $(FFMPEG_OBJ32)
 	cd $(dir $@) && \
+		export PKG_CONFIG_PATH="/usr/lib32/pkgconfig" && \
 		$(abspath $(FFMPEG))/configure \
 			--cc=$(CC_QUOTED) --cxx=$(CXX_QUOTED) \
 			--prefix=$(abspath $(TOOLS_DIR32)) \
-			--extra-cflags=$(FFMPEG_CROSS_CFLAGS) --extra-ldflags=$(FFMPEG_CROSS_LDFLAGS) \
+			--extra-cflags="$(COMMON_FLAGS) -m32" \
+			--extra-ldflags="$(LDFLAGS) -m32" \
 			--disable-static \
 			--enable-shared \
 			--disable-programs \
@@ -1301,11 +1391,16 @@ ffmpeg32: $(FFMPEG_CONFIGURE_FILES32)
 	mkdir -pv $(DST_DIR)/lib
 	cp -a $(TOOLS_DIR32)/lib/{libavcodec,libavfilter,libavformat,libavutil,libswresample}* $(DST_DIR)/lib
 
+endif # ifeq ($(WITH_FFMPEG),1)
+
 ##
 ## FAudio
 ##
 
-FAUDIO_CMAKE_FLAGS = -DCMAKE_BUILD_TYPE=Release -DFORCE_ENABLE_DEBUGCONFIGURATION=ON -DLOG_ASSERTIONS=ON -DCMAKE_INSTALL_LIBDIR="lib" -DXNASONG=OFF -DFFMPEG=ON
+FAUDIO_CMAKE_FLAGS = -DCMAKE_BUILD_TYPE=Release -DFORCE_ENABLE_DEBUGCONFIGURATION=ON -DLOG_ASSERTIONS=ON -DCMAKE_INSTALL_LIBDIR="lib" -DXNASONG=OFF
+ifeq ($(WITH_FFMPEG),1)
+FAUDIO_CMAKE_FLAGS += -DFFMPEG=ON
+endif # ifeq ($(WITH_FFMPEG),1)
 
 FAUDIO_TARGETS = faudio faudio32 faudio64
 
@@ -1320,21 +1415,22 @@ FAUDIO_CONFIGURE_FILES32 := $(FAUDIO_OBJ32)/Makefile
 FAUDIO_CONFIGURE_FILES64 := $(FAUDIO_OBJ64)/Makefile
 
 $(FAUDIO_CONFIGURE_FILES32): SHELL = $(CONTAINER_SHELL32)
-$(FAUDIO_CONFIGURE_FILES32): $(FAUDIO)/CMakeLists.txt $(MAKEFILE_DEP) $(CMAKE_BIN32) | ffmpeg32 $(FAUDIO_OBJ32)
+$(FAUDIO_CONFIGURE_FILES32): $(FAUDIO)/CMakeLists.txt $(MAKEFILE_DEP) $(FAUDIO_DEPS32) | $(FAUDIO_OBJ32)
 	cd $(dir $@) && \
-		../$(CMAKE_BIN32) $(abspath $(FAUDIO)) \
+		$(CMAKE_BIN32) $(abspath $(FAUDIO)) \
 			-DCMAKE_INSTALL_PREFIX="$(abspath $(TOOLS_DIR32))" \
-			$(FAUDIO_CMAKE_FLAGS) \
 			-DFFmpeg_INCLUDE_DIR="$(abspath $(TOOLS_DIR32))/include" \
-			-DCMAKE_C_FLAGS="-m32" -DCMAKE_CXX_FLAGS="-m32"
+			$(FAUDIO_CMAKE_FLAGS) \
+			-DCMAKE_C_FLAGS="$(COMMON_FLAGS) -m32" -DCMAKE_CXX_FLAGS="$(COMMON_FLAGS) -m32"
 
 $(FAUDIO_CONFIGURE_FILES64): SHELL = $(CONTAINER_SHELL64)
-$(FAUDIO_CONFIGURE_FILES64): $(FAUDIO)/CMakeLists.txt $(MAKEFILE_DEP) $(CMAKE_BIN64) | ffmpeg64 $(FAUDIO_OBJ64)
+$(FAUDIO_CONFIGURE_FILES64): $(FAUDIO)/CMakeLists.txt $(MAKEFILE_DEP) $(FAUDIO_DEPS64) | $(FAUDIO_OBJ64)
 	cd $(dir $@) && \
-		../$(CMAKE_BIN64) $(abspath $(FAUDIO)) \
+		$(CMAKE_BIN64) $(abspath $(FAUDIO)) \
 			-DCMAKE_INSTALL_PREFIX="$(abspath $(TOOLS_DIR64))" \
+			-DFFmpeg_INCLUDE_DIR="$(abspath $(TOOLS_DIR64))/include" \
 			$(FAUDIO_CMAKE_FLAGS) \
-			-DFFmpeg_INCLUDE_DIR="$(abspath $(TOOLS_DIR64))/include"
+			-DCMAKE_C_FLAGS="$(COMMON_FLAGS)" -DCMAKE_CXX_FLAGS="$(COMMON_FLAGS)"
 
 faudio32: SHELL = $(CONTAINER_SHELL32)
 faudio32: $(FAUDIO_CONFIGURE_FILES32)
@@ -1528,36 +1624,48 @@ WINE32_MAKE_ARGS := \
 
 # 64bit-configure
 $(WINE_CONFIGURE_FILES64): SHELL = $(CONTAINER_SHELL64)
-$(WINE_CONFIGURE_FILES64): $(MAKEFILE_DEP) | faudio64 gst_base64 $(WINE_OBJ64) bison64
+$(WINE_CONFIGURE_FILES64): $(MAKEFILE_DEP) | $(WINE_DEPS64) $(WINE_OBJ64)
 	cd $(dir $@) && \
 		../$(WINE)/configure \
+			--with-x \
+			--with-gstreamer \
+			--with-faudio \
+			--with-mingw \
 			--without-curses \
+			--without-oss \
+			--disable-win16 \
 			--enable-win64 \
 			--disable-tests \
 			--prefix=$(abspath $(DST_DIR)) \
 			STRIP=$(STRIP_QUOTED) \
-			BISON=$(abspath $(BISON_BIN64)) \
+			$(WINE_BISON64) \
 			CFLAGS="-I$(abspath $(TOOLS_DIR64))/include -g $(COMMON_FLAGS)" \
 			CXXFLAGS="-I$(abspath $(TOOLS_DIR64))/include -g $(COMMON_FLAGS) -std=c++17" \
-			LDFLAGS="-L$(abspath $(TOOLS_DIR64))/lib -Wl,-rpath-link,$(abspath $(TOOLS_DIR64))/lib:/home/vagrant/.local/x86_64-w64-mingw32/lib" \
-			PKG_CONFIG_PATH=$(abspath $(TOOLS_DIR64))/lib/pkgconfig \
+			LDFLAGS="-L$(abspath $(TOOLS_DIR64))/lib -Wl,-rpath-link,$(abspath $(TOOLS_DIR64))/lib" \
+			PKG_CONFIG_PATH=$(abspath $(TOOLS_DIR64))/lib/pkgconfig:/usr/lib/pkgconfig \
 			CC=$(CC_QUOTED) \
 			CXX=$(CXX_QUOTED)
 
 # 32-bit configure
 $(WINE_CONFIGURE_FILES32): SHELL = $(CONTAINER_SHELL32)
-$(WINE_CONFIGURE_FILES32): $(MAKEFILE_DEP) | faudio32 gst_base32 $(WINE_OBJ32) bison32
+$(WINE_CONFIGURE_FILES32): $(MAKEFILE_DEP) | $(WINE_DEPS32) $(WINE_OBJ32)
 	cd $(dir $@) && \
 		../$(WINE)/configure \
+			--with-x \
+			--with-gstreamer \
+			--with-faudio \
+			--with-mingw \
 			--without-curses \
+			--without-oss \
+			--disable-win16 \
 			--disable-tests \
 			--prefix=$(abspath $(WINE_DST32)) \
 			STRIP=$(STRIP_QUOTED) \
-			BISON=$(abspath $(BISON_BIN32)) \
+			$(WINE_BISON32) \
 			CFLAGS="-I$(abspath $(TOOLS_DIR32))/include -g $(COMMON_FLAGS)" \
 			CXXFLAGS="-I$(abspath $(TOOLS_DIR32))/include -g $(COMMON_FLAGS) -std=c++17" \
-			LDFLAGS="-L$(abspath $(TOOLS_DIR32))/lib -Wl,-rpath-link,$(abspath $(TOOLS_DIR32))/lib:/home/vagrant/./local/i686-w64-mingw32/lib" \
-			PKG_CONFIG_PATH=$(abspath $(TOOLS_DIR32))/lib/pkgconfig \
+			LDFLAGS="-L$(abspath $(TOOLS_DIR32))/lib -Wl,-rpath-link,$(abspath $(TOOLS_DIR32))/lib" \
+			PKG_CONFIG_PATH=$(abspath $(TOOLS_DIR32))/lib/pkgconfig:/usr/lib32/pkgconfig \
 			CC=$(CC_QUOTED) \
 			CXX=$(CXX_QUOTED)
 
@@ -1713,6 +1821,8 @@ vrclient32: $(VRCLIENT_CONFIGURE_FILES32) | $(WINE_BUILDTOOLS32) $(filter $(MAKE
 
 ## Create & configure object directory for cmake
 
+ifneq ($(STEAMRT_PATH),) # Don't build cmake in native mode
+
 CMAKE_CONFIGURE_FILES32 := $(CMAKE_OBJ32)/Makefile
 CMAKE_CONFIGURE_FILES64 := $(CMAKE_OBJ64)/Makefile
 
@@ -1764,12 +1874,16 @@ cmake32-intermediate: $(CMAKE_CONFIGURE_FILES32) $(filter $(MAKECMDGOALS),cmake3
 	+$(MAKE) -C $(CMAKE_OBJ32) install
 	touch $(CMAKE_BIN32)
 
+endif # ifneq ($(STEAMRT_PATH),)
+
 ##
 ## bison -- necessary for wine, steam runtime version too old
 ##
 
 # TODO Don't bother with this in native mode
 
+ifneq ($(STEAMRT_PATH),) # Don't build bison in native mode
+
 $(BISON):
 	if [ -e "$(SRCDIR)/../bison/$(BISON_TARBALL)" ]; then \
 		mkdir -p $(dir $@); \
@@ -1834,74 +1948,7 @@ bison32-intermediate: $(BISON_CONFIGURE_FILES32) $(filter $(MAKECMDGOALS),bison3
 	+$(MAKE) -C $(BISON_OBJ32) install
 	touch $(BISON_BIN32)
 	
-##
-## libffi
-##
-
-$(LIBFFI):
-	if [ -e "$(SRCDIR)/../libffi/$(LIBFFI_TARBALL)" ]; then \
-		mkdir -p $(dir $@); \
-		tar -xf "$(SRCDIR)/../libffi/$(LIBFFI_TARBALL)" -C "$(dir $@)"; \
-	else \
-		mkdir -p $(SRCDIR)/contrib/; \
-		if [ ! -e "$(SRCDIR)/contrib/$(LIBFFI_TARBALL)" ]; then \
-			echo ">>>> Downloading libffi. To avoid this in future, put it here: $(SRCDIR)/../libffi/$(LIBFFI_TARBALL)"; \
-			wget -O "$(SRCDIR)/contrib/$(LIBFFI_TARBALL)" "$(LIBFFI_TARBALL_URL)"; \
-		fi; \
-		tar -xf "$(SRCDIR)/contrib/$(LIBFFI_TARBALL)" -C "$(dir $@)"; \
-	fi
-
-LIBFFI_CONFIGURE_FILES32 := $(LIBFFI_OBJ32)/Makefile
-LIBFFI_CONFIGURE_FILES64 := $(LIBFFI_OBJ64)/Makefile
-
-# 64bit-configure
-$(LIBFFI_CONFIGURE_FILES64): SHELL = $(CONTAINER_SHELL64)
-$(LIBFFI_CONFIGURE_FILES64): $(MAKEFILE_DEP) $(LIBFFI) | $(LIBFFI_OBJ64)
-	cd "$(LIBFFI_OBJ64)" && \
-		../$(LIBFFI)/configure --prefix=$(abspath $(TOOLS_DIR64)) \
-		CFLAGS="-I$(abspath $(TOOLS_DIR64))/include -g $(COMMON_FLAGS) -DNDEBUG" \
-		LDFLAGS=-L$(abspath $(TOOLS_DIR64))/lib \
-		--disable-static
-
-# 32-bit configure
-$(LIBFFI_CONFIGURE_FILES32): SHELL = $(CONTAINER_SHELL32)
-$(LIBFFI_CONFIGURE_FILES32): $(MAKEFILE_DEP) $(LIBFFI) | $(LIBFFI_OBJ32)
-	cd "$(LIBFFI_OBJ32)" && \
-		../$(LIBFFI)/configure --prefix=$(abspath $(TOOLS_DIR32)) \
-        CFLAGS="-I$(abspath $(TOOLS_DIR32))/include -g $(COMMON_FLAGS) -DNDEBUG" \
-        LDFLAGS=-L$(abspath $(TOOLS_DIR32))/lib \
-		--disable-static
-
-## libffi goals
-LIBFFI_TARGETS = libffi libffi_configure libffi32 libffi64 libffi_configure32 libffi_configure64
-
-ALL_TARGETS += $(LIBFFI_TARGETS)
-GOAL_TARGETS_LIBS += libffi
-
-.PHONY: $(LIBFFI_TARGETS)
-
-libffi_configure: $(LIBFFI_CONFIGURE_FILES32) $(LIBFFI_CONFIGURE_FILES64)
-
-libffi_configure64: $(LIBFFI_CONFIGURE_FILES64)
-
-libffi_configure32: $(LIBFFI_CONFIGURE_FILES32)
-
-libffi: libffi32 libffi64
-
-libffi64: SHELL = $(CONTAINER_SHELL64)
-libffi64: $(LIBFFI_CONFIGURE_FILES64)
-	+$(MAKE) -C $(LIBFFI_OBJ64)
-	+$(MAKE) -C $(LIBFFI_OBJ64) install
-	mkdir -pv $(DST_DIR)/lib64
-	cp -a $(abspath $(TOOLS_DIR64))/lib/libffi* $(abspath $(DST_DIR))/lib64
-
-libffi32: SHELL = $(CONTAINER_SHELL32)
-libffi32: $(LIBFFI_CONFIGURE_FILES32)
-	+$(MAKE) -C $(LIBFFI_OBJ32)
-	+$(MAKE) -C $(LIBFFI_OBJ32) install
-	mkdir -pv $(DST_DIR)/lib
-	cp -a $(abspath $(TOOLS_DIR32))/lib/libffi* $(abspath $(DST_DIR))/lib
-
+endif # ifneq ($(STEAMRT_PATH),)
 
 ##
 ## dxvk
@@ -1951,7 +1998,7 @@ dxvk_configure32: $(DXVK_CONFIGURE_FILES32)
 dxvk: dxvk32 dxvk64
 
 dxvk64: $(DXVK_CONFIGURE_FILES64)
-	env PATH="$(abspath $(SRCDIR))/glslang/bin/:$(PATH)" ninja -C "$(DXVK_OBJ64)" install
+	env PATH="$(abspath $(SRCDIR))/glslang/bin/:$(PATH)" ninja -C "$(DXVK_OBJ64)" -v install
 	mkdir -p "$(DST_DIR)/lib64/wine/dxvk"
 	cp "$(DXVK_OBJ64)"/bin/dxgi.dll "$(DST_DIR)"/lib64/wine/dxvk
 	cp "$(DXVK_OBJ64)"/bin/d3d11.dll "$(DST_DIR)"/lib64/wine/dxvk
@@ -1964,7 +2011,7 @@ dxvk64: $(DXVK_CONFIGURE_FILES64)
 
 
 dxvk32: $(DXVK_CONFIGURE_FILES32)
-	env PATH="$(abspath $(SRCDIR))/glslang/bin/:$(PATH)" ninja -C "$(DXVK_OBJ32)" install
+	env PATH="$(abspath $(SRCDIR))/glslang/bin/:$(PATH)" ninja -C "$(DXVK_OBJ32)" -v install
 	mkdir -p "$(DST_DIR)"/lib/wine/dxvk
 	cp "$(DXVK_OBJ32)"/bin/dxgi.dll "$(DST_DIR)"/lib/wine/dxvk/
 	cp "$(DXVK_OBJ32)"/bin/d3d11.dll "$(DST_DIR)"/lib/wine/dxvk/
@@ -1983,14 +2030,18 @@ WINEWIDL_CONFIGURE_FILES64 := $(WINEWIDL_OBJ64)/Makefile
 WINEWIDL_CONFIGURE_FILES32 := $(WINEWIDL_OBJ32)/Makefile
 
 $(WINEWIDL_CONFIGURE_FILES32): SHELL = $(CONTAINER_SHELL32)
-$(WINEWIDL_CONFIGURE_FILES32): $(MAKEFILE_DEP) | $(WINEWIDL_OBJ32) bison32
+$(WINEWIDL_CONFIGURE_FILES32): $(MAKEFILE_DEP) | $(WINEWIDL_OBJ32) $(WINEWIDL_DEPS32)
 	cd $(dir $@) && \
 		../$(WINE)/configure \
+			--with-x \
+			--with-mingw \
 			--without-curses \
+			--without-oss \
+			--disable-win16 \
 			--disable-tests \
 			STRIP=$(STRIP_QUOTED) \
-			BISON=$(abspath $(BISON_BIN32)) \
-			CFLAGS=-I$(abspath $(TOOLS_DIR64))"/include -g $(COMMON_FLAGS)" \
+			$(WINE_BISON32) \
+			CFLAGS=-I$(abspath $(TOOLS_DIR32))"/include -g $(COMMON_FLAGS)" \
 			LDFLAGS=-L$(abspath $(TOOLS_DIR32))/lib \
 			PKG_CONFIG_PATH=$(abspath $(TOOLS_DIR32))/lib/pkgconfig \
 			CC=$(CC_QUOTED) \
@@ -2002,14 +2053,18 @@ $(WINEWIDL32): $(WINEWIDL_CONFIGURE_FILES32)
 	make tools/widl
 
 $(WINEWIDL_CONFIGURE_FILES64): SHELL = $(CONTAINER_SHELL64)
-$(WINEWIDL_CONFIGURE_FILES64): $(MAKEFILE_DEP) | $(WINEWIDL_OBJ64) bison64
+$(WINEWIDL_CONFIGURE_FILES64): $(MAKEFILE_DEP) | $(WINEWIDL_OBJ64) $(WINEWIDL_DEPS64)
 	cd $(dir $@) && \
 		../$(WINE)/configure \
+			--with-x \
+			--with-mingw \
 			--without-curses \
+			--without-oss \
+			--disable-win16 \
 			--enable-win64 \
 			--disable-tests \
 			STRIP=$(STRIP_QUOTED) \
-			BISON=$(abspath $(BISON_BIN64)) \
+			$(WINE_BISON64) \
 			CFLAGS=-I$(abspath $(TOOLS_DIR64))"/include -g $(COMMON_FLAGS)" \
 			LDFLAGS=-L$(abspath $(TOOLS_DIR64))/lib \
 			PKG_CONFIG_PATH=$(abspath $(TOOLS_DIR64))/lib/pkgconfig \
