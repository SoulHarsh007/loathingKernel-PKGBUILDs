From 8cb26d47157232e2ac4cc637d5a12b458055099a Mon Sep 17 00:00:00 2001
From: Alex Henrie <alexhenrie24@gmail.com>
Date: Thu, 19 Oct 2023 22:39:07 -0600
Subject: [PATCH 2/2] dsound: Dynamically allocate the global device GUID
 arrays.

This removes the arbitrary limit on the number of renderers and
capturers while satisfying applications that expect the GUIDs to remain
valid after DirectSoundCaptureEnumerate returns.

(cherry picked from commit 5a81b6ac43e1057c0c6f9953fd5cbb1bc5d0f11bi)

CW-Bug-Id: #23002
---
 dlls/dsound/dsound_main.c    | 15 +++++++++++++--
 dlls/dsound/dsound_private.h |  4 ++--
 include/mmsystem.h           |  6 ------
 3 files changed, 15 insertions(+), 10 deletions(-)

diff --git a/dlls/dsound/dsound_main.c b/dlls/dsound/dsound_main.c
index 3347f0243ab..0f566139a65 100644
--- a/dlls/dsound/dsound_main.c
+++ b/dlls/dsound/dsound_main.c
@@ -76,8 +76,11 @@ static CRITICAL_SECTION_DEBUG DSOUND_renderers_lock_debug =
 };
 CRITICAL_SECTION DSOUND_renderers_lock = { &DSOUND_renderers_lock_debug, -1, 0, 0, 0, 0 };
 
-GUID                    DSOUND_renderer_guids[MAXWAVEDRIVERS];
-GUID                    DSOUND_capture_guids[MAXWAVEDRIVERS];
+/* Some applications expect the GUID pointers emitted from DirectSoundCaptureEnumerate to remain
+ * valid at least until the next time DirectSoundCaptureEnumerate is called, so we store them in
+ * these dynamically allocated arrays. */
+GUID *DSOUND_renderer_guids;
+GUID *DSOUND_capture_guids;
 
 const WCHAR wine_vxd_drv[] = L"winemm.vxd";
 
@@ -464,11 +467,19 @@ HRESULT enumerate_mmdevices(EDataFlow flow, GUID *guids,
         return DS_OK;
     }
 
+    free(guids);
     if(count == 0){
         IMMDeviceCollection_Release(coll);
         release_mmdevenum(devenum, init_hr);
+        guids = NULL;
         return DS_OK;
     }
+    guids = malloc((count + 1) * sizeof(GUID));
+    if(!guids){
+        IMMDeviceCollection_Release(coll);
+        release_mmdevenum(devenum, init_hr);
+        return E_OUTOFMEMORY;
+    }
 
     TRACE("Calling back with NULL (Primary Sound Driver)\n");
     keep_going = cb(NULL, L"Primary Sound Driver", L"", user);
diff --git a/dlls/dsound/dsound_private.h b/dlls/dsound/dsound_private.h
index 09fa219ecca..6f8051f6f25 100644
--- a/dlls/dsound/dsound_private.h
+++ b/dlls/dsound/dsound_private.h
@@ -254,8 +254,8 @@ HRESULT IDirectSoundCaptureImpl_Create(IUnknown *outer_unk, REFIID riid, void **
 extern CRITICAL_SECTION DSOUND_renderers_lock DECLSPEC_HIDDEN;
 extern struct list DSOUND_renderers DECLSPEC_HIDDEN;
 
-extern GUID DSOUND_renderer_guids[MAXWAVEDRIVERS] DECLSPEC_HIDDEN;
-extern GUID DSOUND_capture_guids[MAXWAVEDRIVERS] DECLSPEC_HIDDEN;
+extern GUID *DSOUND_renderer_guids;
+extern GUID *DSOUND_capture_guids;
 
 extern const WCHAR wine_vxd_drv[] DECLSPEC_HIDDEN;
 
diff --git a/include/mmsystem.h b/include/mmsystem.h
index 5684ff20683..04864cf5f63 100644
--- a/include/mmsystem.h
+++ b/include/mmsystem.h
@@ -54,12 +54,6 @@ typedef HWAVEOUT *LPHWAVEOUT;
 
 typedef LRESULT (CALLBACK *DRIVERPROC)(DWORD_PTR,HDRVR,UINT,LPARAM,LPARAM);
 
-#define MAXWAVEDRIVERS	10
-#define MAXMIDIDRIVERS	10
-#define MAXAUXDRIVERS	10
-#define MAXMCIDRIVERS	32
-#define MAXMIXERDRIVERS	10
-
 #define MAXPNAMELEN      32     /* max product name length (including NULL) */
 #define MAXERRORLENGTH   256    /* max error text length (including NULL) */
 #define MAX_JOYSTICKOEMVXDNAME	260
-- 
2.42.1

