server.modules = (
	"mod_access",
	"mod_accesslog",
	"mod_expire",
	"mod_compress",
 	"mod_redirect",
	"mod_setenv",
	"mod_rewrite",
	"mod_fastcgi"
)

mimetype.assign		= (
				".html" => "text/html",
				".txt" => "text/plain",
				".css" => "text/css",
				".js" => "application/x-javascript",
				".jpg" => "image/jpeg",
				".jpeg" => "image/jpeg",
				".gif" => "image/gif",
				".png" => "image/png",
				".svg" => "image/svg+xml",	# thanks to nikke
				"" => "application/octet-stream"
			)

fastcgi.server = ( 
    ".php" => (
        "localhost" => ( 
            "bin-path" => "/usr/bin/php-cgi -d open_basedir=/srv/http/pihole:/etc/pihole:/etc/hosts:/etc/hostname:/run/log/pihole:/run/pihole -d session.save_path=/run/pihole",
            "socket" => "/tmp/php-fastcgi.sock",
            "broken-scriptfilename" => "enable",
            "max-procs" => 4, 
            "bin-environment" => (
                "PHP_FCGI_CHILDREN" => "1" # default value
            )
        )
    )   
)

server.document-root        = "/srv/http/pihole"
server.error-handler-404    = "index.html"
server.username             = "http"
server.groupname            = "http"
server.port                 = 80

index-file.names            = ( "index.php", "index.html", "index.lighttpd.html" )
url.access-deny             = ( "~", ".inc" )
static-file.exclude-extensions = ( ".php", ".pl", ".fcgi" )

compress.cache-dir          = "/var/cache/lighttpd/compress/"
compress.filetype           = ( "application/javascript", "text/css", "text/html", "text/plain" )

# If the URL starts with /admin, it is the Web interface
$HTTP["url"] =~ "^/admin/" {
	# Create a response header for debugging using curl -I
    setenv.add-response-header = (
        "X-Pi-hole" => "The Pi-hole Web interface is working!",
        "X-Frame-Options" => "DENY"
    )
}

# If the URL does not start with /admin, then it is a query for an ad domain
$HTTP["url"] =~ "^(?!/admin)/.*" {
    # Create a response header for debugging using curl -I
    setenv.add-response-header = ( "X-Pi-hole" => "A black hole for Internet advertisements." )
    # rewrite only js requests
    url.rewrite = ("(.*).js" => "pihole/index.js")
}

