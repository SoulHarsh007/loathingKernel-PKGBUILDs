diff --git a/patches/proton/14-proton-sdl-joy.patch b/patches/proton/14-proton-sdl-joy.patch
index 177b2e8..294ad7c 100644
--- a/patches/proton/14-proton-sdl-joy.patch
+++ b/patches/proton/14-proton-sdl-joy.patch
@@ -10086,239 +10086,6 @@ index 3b4968fb6d8..0b067bc0a74 100644
 
  EXTRADLLFLAGS = -mno-cygwin
 
-diff --git a/dlls/xinput1_3/hid.c b/dlls/xinput1_3/hid.c
-index 978399e1c52..44166a3eac2 100644
---- a/dlls/xinput1_3/hid.c
-+++ b/dlls/xinput1_3/hid.c
-@@ -67,8 +67,6 @@ struct hid_platform_private {
-     struct axis_info lx, ly, triggers, rx, ry;
- };
-
--static DWORD last_check = 0;
--
- static void MarkUsage(struct hid_platform_private *private, WORD usage, LONG min, LONG max, USHORT bits)
- {
-     struct axis_info info = {min, max-min, bits};
-@@ -214,19 +212,6 @@ void HID_find_gamepads(xinput_controller *devices)
-     DWORD idx;
-     int i, open_device_idx;
-
--    idx = GetTickCount();
--    if ((idx - last_check) < 2000)
--        return;
--
--    EnterCriticalSection(&xinput_crit);
--
--    if ((idx - last_check) < 2000)
--    {
--        LeaveCriticalSection(&xinput_crit);
--        return;
--    }
--    last_check = idx;
--
-     HidD_GetHidGuid(&hid_guid);
-     hid_guid.Data4[7]++; /* HACK: look up the xinput-specific devices */
-
-@@ -292,7 +277,6 @@ void HID_find_gamepads(xinput_controller *devices)
-     }
-     HeapFree(GetProcessHeap(), 0, data);
-     SetupDiDestroyDeviceInfoList(device_info_set);
--    LeaveCriticalSection(&xinput_crit);
- }
-
- static void remove_gamepad(xinput_controller *device)
-diff --git a/dlls/xinput1_3/xinput_main.c b/dlls/xinput1_3/xinput_main.c
-index 63b7dd7f0b5..173a3fdb508 100644
---- a/dlls/xinput1_3/xinput_main.c
-+++ b/dlls/xinput1_3/xinput_main.c
-@@ -25,6 +25,7 @@
- #include "windef.h"
- #include "winbase.h"
- #include "winerror.h"
-+#include "winuser.h"
-
- #include "xinput.h"
- #include "xinput_private.h"
-@@ -34,6 +35,8 @@
-
- WINE_DEFAULT_DEBUG_CHANNEL(xinput);
-
-+static HINSTANCE xinput_instance;
-+
- /* xinput_crit guards controllers array */
- static CRITICAL_SECTION_DEBUG xinput_critsect_debug =
- {
-@@ -95,11 +98,79 @@ static void unlock_device(xinput_controller *device)
-     LeaveCriticalSection(&device->crit);
- }
-
-+static BOOL should_check = TRUE;
-+static BOOL msg_wnd_quit;
-+static HWND msg_wnd;
-+static HANDLE msg_wnd_thread;
-+static HINSTANCE msg_wnd_module;
-+
-+static LRESULT CALLBACK device_notification_wndproc(HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam)
-+{
-+    switch(msg)
-+    {
-+    case WM_DEVICECHANGE:
-+        should_check = TRUE;
-+        break;
-+    case WM_USER:
-+        DestroyWindow(msg_wnd);
-+        break;
-+    case WM_DESTROY:
-+        msg_wnd_quit = TRUE;
-+        break;
-+    }
-+    return DefWindowProcW(hwnd, msg, wparam, lparam);
-+}
-+
-+static DWORD WINAPI msg_wnd_threadproc(void *user)
-+{
-+    MSG msg;
-+    WNDCLASSEXW cls = {0};
-+    HANDLE inst;
-+    HANDLE evt = user;
-+
-+    static const WCHAR xinput_class[] = {'_','_','w','i','n','e','_','x','i','n','p','u','t','_','d','e','v','n','o','t','i','f','y',0};
-+
-+    cls.cbSize = sizeof(cls);
-+    cls.hInstance = xinput_instance;
-+    cls.lpszClassName = xinput_class;
-+    cls.lpfnWndProc = device_notification_wndproc;
-+    RegisterClassExW(&cls);
-+
-+    msg_wnd = CreateWindowExW(0, xinput_class, NULL, 0, 0, 0, 0, 0,
-+            HWND_MESSAGE, NULL, NULL, NULL);
-+
-+    RegisterDeviceNotificationW(msg_wnd, NULL, 0);
-+
-+    msg_wnd_quit = FALSE;
-+
-+    SetEvent(evt);
-+    evt = NULL;
-+
-+    while(!msg_wnd_quit && ((int)GetMessageW(&msg, msg_wnd, 0, 0)) > 0)
-+    {
-+        TranslateMessage(&msg);
-+        DispatchMessageW(&msg);
-+    }
-+
-+    EnterCriticalSection(&xinput_crit);
-+    inst = msg_wnd_module;
-+    msg_wnd_module = NULL;
-+    CloseHandle(msg_wnd_thread);
-+    msg_wnd_thread = NULL;
-+    msg_wnd = NULL;
-+    LeaveCriticalSection(&xinput_crit);
-+
-+    FreeLibraryAndExitThread(inst, 0);
-+
-+    return 0;
-+}
-+
- BOOL WINAPI DllMain(HINSTANCE inst, DWORD reason, LPVOID reserved)
- {
-     switch(reason)
-     {
-         case DLL_PROCESS_ATTACH:
-+            xinput_instance = inst;
-             DisableThreadLibraryCalls(inst);
-             break;
-         case DLL_PROCESS_DETACH:
-@@ -110,6 +181,43 @@ BOOL WINAPI DllMain(HINSTANCE inst, DWORD reason, LPVOID reserved)
-     return TRUE;
- }
-
-+static void find_gamepads(void)
-+{
-+    static ULONGLONG last_check = 0;
-+    ULONGLONG now;
-+
-+#define DELAY_BETWEEN_CHECKS_MS 2000
-+
-+    now = GetTickCount64();
-+    if (!should_check && (now - last_check) < DELAY_BETWEEN_CHECKS_MS)
-+        return;
-+
-+    EnterCriticalSection(&xinput_crit);
-+
-+    if (!msg_wnd_thread)
-+    {
-+        HANDLE evt = CreateEventW(NULL, 0, 0, NULL);
-+        GetModuleHandleExW(GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS,
-+                (const WCHAR *)&msg_wnd_threadproc, &msg_wnd_module);
-+        msg_wnd_thread = CreateThread(NULL, 0, &msg_wnd_threadproc, evt, 0, NULL);
-+        WaitForSingleObject(evt, INFINITE);
-+        CloseHandle(evt);
-+    }
-+
-+    if (!should_check && (now - last_check) < DELAY_BETWEEN_CHECKS_MS)
-+    {
-+        LeaveCriticalSection(&xinput_crit);
-+        return;
-+    }
-+
-+    last_check = now;
-+    should_check = FALSE;
-+
-+    HID_find_gamepads(controllers);
-+
-+    LeaveCriticalSection(&xinput_crit);
-+}
-+
- void WINAPI DECLSPEC_HOTPATCH XInputEnable(BOOL enable)
- {
-     int index;
-@@ -120,7 +228,18 @@ void WINAPI DECLSPEC_HOTPATCH XInputEnable(BOOL enable)
-     to the controllers. Setting to true will send the last vibration
-     value (sent to XInputSetState) to the controller and allow messages to
-     be sent */
--    HID_find_gamepads(controllers);
-+
-+    if (enable)
-+    {
-+        find_gamepads();
-+    }
-+    else
-+    {
-+        EnterCriticalSection(&xinput_crit);
-+        if(msg_wnd)
-+            PostMessageW(msg_wnd, WM_USER, 0, 0);
-+        LeaveCriticalSection(&xinput_crit);
-+    }
-
-     for (index = 0; index < XUSER_MAX_COUNT; index ++)
-     {
-@@ -136,7 +255,7 @@ DWORD WINAPI DECLSPEC_HOTPATCH XInputSetState(DWORD index, XINPUT_VIBRATION* vib
-
-     TRACE("(index %u, vibration %p)\n", index, vibration);
-
--    HID_find_gamepads(controllers);
-+    find_gamepads();
-
-     if (index >= XUSER_MAX_COUNT)
-         return ERROR_BAD_ARGUMENTS;
-@@ -157,7 +276,7 @@ static DWORD xinput_get_state(DWORD index, XINPUT_STATE *state)
-     if (!state)
-         return ERROR_BAD_ARGUMENTS;
-
--    HID_find_gamepads(controllers);
-+    find_gamepads();
-
-     if (index >= XUSER_MAX_COUNT)
-         return ERROR_BAD_ARGUMENTS;
-@@ -421,7 +540,7 @@ DWORD WINAPI DECLSPEC_HOTPATCH XInputGetCapabilities(DWORD index, DWORD flags, X
- {
-     TRACE("(index %u, flags 0x%x, capabilities %p)\n", index, flags, capabilities);
-
--    HID_find_gamepads(controllers);
-+    find_gamepads();
-
-     if (index >= XUSER_MAX_COUNT)
-         return ERROR_BAD_ARGUMENTS;
 diff --git a/dlls/xinput1_4/Makefile.in b/dlls/xinput1_4/Makefile.in
 index cdf4b4fed05..8f5aef39594 100644
 --- a/dlls/xinput1_4/Makefile.in
