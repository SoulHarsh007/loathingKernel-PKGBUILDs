# Maintainer: Felix Yan <felixonmars@archlinux.org>
# Contributor: Sven-Hendrik Haase <sh@lutzhaase.com>
# Contributor: Jan "heftig" Steffens <jan.steffens@gmail.com>
# Contributor: Eduardo Romero <eduardo@archlinux.org>
# Contributor: Giovanni Scafora <giovanni@archlinux.org>

pkgname=wine-staging
_tkg_commit=f5cefabbb9e5cb6c9107a7909e0575c95e136d4d
pkgver=9.11
pkgrel=1

_pkgbasever=${pkgver/rc/-rc}
_winever=$_pkgbasever
#_winever=${_pkgbasever%.*}

source=(https://dl.winehq.org/wine/source/9.x/wine-$_winever.tar.xz{,.sign}
        "https://github.com/wine-staging/wine-staging/archive/v$_pkgbasever/wine-staging-v$_pkgbasever.tar.gz"
        30-win32-aliases.conf
        wine-binfmt.conf)
source+=(
        git+https://github.com/Frogging-Family/wine-tkg-git.git#commit=${_tkg_commit}
        wine-wmclass.patch
        wine-isolate_home.patch
        wine-ntsync.patch
        0001-winewayland-Avoid-crashing-when-the-dummy-window-sur.patch
)
sha512sums=('695170140372f169e78e90a66d938839c70f9647531ae8d782c58fb0450460174f2958f7656f8d516447a22ef6e792a8c89f2f18c25fac847adf46bc51184999'
            'SKIP'
            '3f60e43e39b0d78938e3765719bb0aa3f052e9dbbed71cc6990a8038c9dddcd62edacd85c75bf7383f62294f2b0b464adc1eb9e16fbac81d60f779e55addc65b'
            '6e54ece7ec7022b3c9d94ad64bdf1017338da16c618966e8baf398e6f18f80f7b0576edf1d1da47ed77b96d577e4cbb2bb0156b0b11c183a0accf22654b0a2bb'
            'bdde7ae015d8a98ba55e84b86dc05aca1d4f8de85be7e4bd6187054bfe4ac83b5a20538945b63fb073caab78022141e9545685e4e3698c97ff173cf30859e285')
sha512sums+=(
            'SKIP'
            '30437d8ee92c5741fa50a7fe346ccfc48ba809dad0d740903a05a67781d23ea38a5094038a070a253e3fdd8046783b46a5420df6361bdd30cb229d3d88107569'
            '3dcdbd523fcbe79b9e9e9b026b9d0a5edf296514c7b48bd465d2dc05a8ca08e23ba8817e2de08edfe52286a2a2f81db42b65f71254cabe496752b9d45131d282'
            'ec00f7757beb400477f6ae80110b497da3276c9dbea06ab1b4f57cc96032dab517154512275fe6e671a58f4d0a6b124ffcb534f4290873a2b52c0c4cec97fb25'
            '0ba8f08a2b5102208ec0711bd82d6aa417df52b2e75ce9e65e26bfe2bb5f8e100450e50ec77186a10de3e282d1290b847140af7a8e0ea9f071bb708acb1e1e2e'
)
validpgpkeys=(5AC1A08B03BD7A313E0A955AF5E6E9EEB9461DD7
              DA23579A74D4AD9AF9D3F945CEFAC8EAAF17519D)

pkgdesc="A compatibility layer for running Windows programs - Staging branch"
url="https://www.wine-staging.com"
arch=(x86_64)
options=(!staticlibs !lto)
license=(LGPL-2.1-or-later)

depends=(
  attr             #lib32-attr
  fontconfig       #lib32-fontconfig
  libxcursor       #lib32-libxcursor
  libxrandr        #lib32-libxrandr
  libxi            #lib32-libxi
  gettext          #lib32-gettext
  freetype2        #lib32-freetype2
  gcc-libs         #lib32-gcc-libs
  libpcap          #lib32-libpcap
  desktop-file-utils
)
depends+=(
  libxkbcommon     #lib32-libxkbcommon
  wayland          #lib32-wayland
)

makedepends=(autoconf bison perl flex mingw-w64-gcc
  git
  python
  giflib                #lib32-giflib
  gnutls                #lib32-gnutls
  libxinerama           #lib32-libxinerama
  libxcomposite         #lib32-libxcomposite
  libxxf86vm            #lib32-libxxf86vm
  v4l-utils             #lib32-v4l-utils
  alsa-lib              #lib32-alsa-lib
  libxcomposite         #lib32-libxcomposite
  mesa                  #lib32-mesa
  mesa-libgl            #lib32-mesa-libgl
  opencl-icd-loader     #lib32-opencl-icd-loader
  libpulse              #lib32-libpulse
  libva                 #lib32-libva
  gtk3                  #lib32-gtk3
  gst-plugins-base-libs #lib32-gst-plugins-base-libs
  vulkan-icd-loader     #lib32-vulkan-icd-loader
  sdl2                  #lib32-sdl2
  libcups               #lib32-libcups
  sane
  libgphoto2
  ffmpeg
  samba
  opencl-headers
)
makedepends+=(
  ntsync-header
)

optdepends=(
  giflib                #lib32-giflib
  gnutls                #lib32-gnutls
  v4l-utils             #lib32-v4l-utils
  libpulse              #lib32-libpulse
  alsa-plugins          #lib32-alsa-plugins
  alsa-lib              #lib32-alsa-lib
  libxcomposite         #lib32-libxcomposite
  libxinerama           #lib32-libxinerama
  opencl-icd-loader     #lib32-opencl-icd-loader
  libva                 #lib32-libva
  gtk3                  #lib32-gtk3
  gst-plugins-base-libs #lib32-gst-plugins-base-libs
  gst-plugins-good      #lib32-gst-plugins-good
  vulkan-icd-loader     #lib32-vulkan-icd-loader
  sdl2                  #lib32-sdl2
  sane
  libgphoto2
  ffmpeg
  cups
  samba           dosbox
)
optdepends+=(
  ntsync-dkms
)

provides=("wine=$pkgver")
conflicts=('wine')
install=wine.install

prepare() {
  # Allow ccache to work
  mv wine-$_winever $pkgname

  # Get rid of old build dirs
  rm -rf $pkgname-{32,64}-build
  mkdir $pkgname-{32,64}-build

  # apply wine-staging patchset
  cd $pkgname
  patch -p1 -i "$srcdir"/wine-ntsync.patch
  ../wine-staging-$_pkgbasever/staging/patchinstall.py --all \
    -W eventfd_synchronization \
    -W ntdll-Syscall_Emulation \
    -W server-PeekMessage \
    -W server-Signal_Thread

  _tkg_path="$srcdir"/wine-tkg-git/wine-tkg-git/wine-tkg-patches
  #patch -p1 -i "$_tkg_path"/proton/fsync/fsync-unix-staging.patch
  #patch -p1 -i "$_tkg_path"/proton/fsync/fsync_futex_waitv.patch
  patch -p1 -i "$_tkg_path"/proton/LAA/LAA-unix-staging.patch
  patch -p1 -i "$_tkg_path"/proton/msvcrt_nativebuiltin/msvcrt_nativebuiltin_mainline.patch
  patch -p1 -i "$_tkg_path"/proton/proton-win10-default/proton-win10-default.patch
  #patch -p1 -i "$_tkg_path"/proton/valve_proton_fullscreen_hack/FS_bypass_compositor.patch

  patch -p1 -i "$srcdir"/wine-wmclass.patch
  patch -p1 -i "$srcdir"/wine-isolate_home.patch
  patch -p1 -i "$srcdir"/0001-winewayland-Avoid-crashing-when-the-dummy-window-sur.patch
  ./dlls/winevulkan/make_vulkan
  ./tools/make_specfiles
  ./tools/make_requests
  autoreconf -fiv
}

build() {
  # Doesn't compile without remove these flags as of 4.10
  export CFLAGS="$CFLAGS -ffat-lto-objects"

  local -a split=($CFLAGS)
  local -A flags
  for opt in "${split[@]}"; do flags["${opt%%=*}"]="${opt##*=}"; done
  local march="${flags["-march"]:-nocona}"
  local mtune="generic" #"${flags["-mtune"]:-core-avx2}"

  # From Proton
  OPTIMIZE_FLAGS="-O3 -march=$march -mtune=$mtune -mfpmath=sse -pipe -fno-semantic-interposition"
  SANITY_FLAGS="-fwrapv -fno-strict-aliasing"
  WARNING_FLAGS="-Wno-incompatible-pointer-types"
  COMMON_FLAGS="$OPTIMIZE_FLAGS $SANITY_FLAGS $WARNING_FLAGS -s"

  export LDFLAGS="-Wl,-O1,--sort-common,--as-needed"
  export CROSSLDFLAGS="$LDFLAGS -Wl,--file-alignment,4096"

  cd "$srcdir"

  msg2 "Building Wine-64..."

  export CFLAGS="$COMMON_FLAGS -mcmodel=small"
  export CXXFLAGS="$COMMON_FLAGS -mcmodel=small -std=c++17"
  export CROSSCFLAGS="$COMMON_FLAGS"
  export CROSSCXXFLAGS="$COMMON_FLAGS -std=c++17"
  export PKG_CONFIG_PATH="/usr/lib/pkgconfig:/usr/share/pkgconfig"
  cd "$srcdir/$pkgname-64-build"
  ../$pkgname/configure \
    --prefix=/usr \
    --libdir=/usr/lib \
    --with-x \
    --with-wayland \
    --with-gstreamer \
    --with-mingw \
    --with-alsa \
    --without-oss \
    --disable-winemenubuilder \
    --disable-tests \
    --enable-archs=x86_64,i386 \
    --with-xattr

  make

}

package() {

  msg2 "Packaging Wine-64..."
  cd "$srcdir/$pkgname-64-build"
  make prefix="$pkgdir/usr" \
    libdir="$pkgdir/usr/lib" \
    dlldir="$pkgdir/usr/lib/wine" install

  ln -sf /usr/bin/wine "$pkgdir"/usr/bin/wine64

  # Font aliasing settings for Win32 applications
  install -d "$pkgdir"/usr/share/fontconfig/conf.{avail,default}
  install -m644 "$srcdir/30-win32-aliases.conf" "$pkgdir/usr/share/fontconfig/conf.avail"
  ln -s ../conf.avail/30-win32-aliases.conf "$pkgdir/usr/share/fontconfig/conf.default/30-win32-aliases.conf"
  install -Dm 644 "$srcdir/wine-binfmt.conf" "$pkgdir/usr/lib/binfmt.d/wine.conf"

  i686-w64-mingw32-strip --strip-unneeded "$pkgdir"/usr/lib/wine/i386-windows/*.{dll,exe}
  x86_64-w64-mingw32-strip --strip-unneeded "$pkgdir"/usr/lib/wine/x86_64-windows/*.{dll,exe}

  find "$pkgdir"/usr/lib/wine -iname "*.a" -delete
  find "$pkgdir"/usr/lib/wine -iname "*.def" -delete
}

# vim:set ts=8 sts=2 sw=2 et:
